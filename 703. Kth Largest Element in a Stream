Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Your KthLargest class will have a constructor which accepts an integer k and an integer array nums, which contains initial elements from the stream. For each call to the method KthLargest.add, return the element representing the kth largest element in the stream.

Example:

int k = 3;
int[] arr = [4,5,8,2];
KthLargest kthLargest = new KthLargest(3, arr);
kthLargest.add(3);   // returns 4
kthLargest.add(5);   // returns 5
kthLargest.add(10);  // returns 5
kthLargest.add(9);   // returns 8
kthLargest.add(4);   // returns 8
Note:
You may assume that nums' length ≥ k-1 and k ≥ 1.

题解：

Runtime: 68 ms, faster than 69.71% of C++ online submissions for Kth Largest Element in a Stream.
Memory Usage: 19.9 MB, less than 15.00% of C++ online submissions for Kth Largest Element in a Stream.

class KthLargest {
public:
    priority_queue<int, vector<int>, greater<int>> heap;
    int kk;
    KthLargest(int k, vector<int>& nums) {
        int n = nums.size();
        kk = k;
        for(int i=0;i<min(k, n);i++)
            heap.push(nums[i]);
        for(int i=min(k,n);i<n;i++)
        {
            if(nums[i]>heap.top())
            {
                heap.pop();
                heap.push(nums[i]);
            }
        }
    }
    
    int add(int val) {
        if(heap.size()<kk)
        {
            heap.push(val);
            return heap.top();
        }  
        if(val<heap.top())
            return heap.top();
        heap.pop();
        heap.push(val);
        return heap.top();
    }
};

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest* obj = new KthLargest(k, nums);
 * int param_1 = obj->add(val);
 */

改了之后

Runtime: 76 ms, faster than 34.86% of C++ online submissions for Kth Largest Element in a Stream.
Memory Usage: 19.9 MB, less than 15.00% of C++ online submissions for Kth Largest Element in a Stream.

class KthLargest {
public:
    priority_queue<int, vector<int>, greater<int>> heap;
    int size;
    KthLargest(int k, vector<int>& nums) {
        int n = nums.size();
        size = k;
        for(int num : nums)
        {
            heap.push(num);
            if(heap.size()>k)
                heap.pop();
        }
        
    }
    
    int add(int val) {
        heap.push(val);
        if(heap.size()>size)
            heap.pop();
        return heap.top();
    }
};

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest* obj = new KthLargest(k, nums);
 * int param_1 = obj->add(val);
 */
